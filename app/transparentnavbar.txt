import { Stack } from "expo-router";
import 'react-native-reanimated';
import React, { useState } from "react";
import { SafeAreaProvider } from "react-native-safe-area-context";
import { QueryClientProvider, QueryClient } from "@tanstack/react-query";
import { View, Text, TouchableOpacity } from 'react-native';
import { useRouter, usePathname } from 'expo-router';
import SplashScreen from './splashscreen'; 
import { FontAwesome } from '@expo/vector-icons';

export default function RootLayout() {
  const queryClient = new QueryClient();
  const [isSplashVisible, setIsSplashVisible] = useState(true);

  const handleSplashFinish = () => {
    setIsSplashVisible(false);
  };

  if (isSplashVisible) {
    return <SplashScreen onFinish={handleSplashFinish} />;
  }

  return (
    <QueryClientProvider client={queryClient}>
      <RootLayoutNav />
    </QueryClientProvider>
  );
}

function NavBar() {
  const router = useRouter();
  const pathname = usePathname();
  const [selectedTab, setSelectedTab] = useState(pathname);

  const handlePress = (tab: string) => {
    if (selectedTab !== tab) {
      setSelectedTab(tab);
      router.push(tab);
    }
  };

  const getDisplayName = (route: any) => {
    switch(route) {
      case '/': return 'Map';
      case '/store': return 'Store';
      case '/friends': return 'Friends';
      case '/profile': return 'Profile';
      default: return '';
    }
  };

  return (
    <View style={{
      position: 'absolute', 
      bottom: 0, 
      left: 0,
      right: 0,
      width: '100%',
      flexDirection: 'row',
      justifyContent: 'space-around',
      backgroundColor: 'rgba(255, 255, 255, 0.0)', // Ensure transparency
      height: 90,
      alignItems: 'center',
      borderTopWidth: 0, // Optional: adds a subtle border at the top of the NavBar
      borderColor: 'rgba(0, 0, 0, 0.1)' // Optional: Color of the border
    }}>
      {['/', '/store', '/friends', '/profile'].map((tab, index) => (
        <TouchableOpacity 
          key={index}
          onPress={() => handlePress(tab)} 
          disabled={selectedTab === tab}
          style={{ alignItems: 'center', justifyContent: 'center' }}
        >
          <View style={{
            width: 50,
            height: 50,
            borderRadius: 25,
            backgroundColor: 'rgba(0, 0, 0, 0.1)', // Adjust opacity here
            alignItems: 'center',
            justifyContent: 'center',
            marginBottom: 10  // Raises the icon slightly
          }}>
            <FontAwesome 
              name={tab === '/' ? 'map' : 
                    tab === '/store' ? 'shopping-basket' : 
                    tab === '/friends' ? 'users' : 'user'}
              color={selectedTab === tab ? 'blue' : 'black'} 
              size={24} 
            />
          </View>
          <Text style={{ color: 'grey', fontSize: 10, marginTop: -4}}>
            {getDisplayName(tab)}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );
}

function RootLayoutNav() {
  const pathname = usePathname();
  const hideNavBarRoutes = ['/login', '/register', '/add-friends'];

  return (
    <SafeAreaProvider>
      <View style={{ flex: 1, backgroundColor: 'rgba(255, 255, 255, 0.0)' }}>
        <Stack>
          <Stack.Screen name="index" options={{ headerShown: false }} />
          <Stack.Screen name="login" options={{ headerShown: false, gestureEnabled: false, animation: 'slide_from_bottom' }} />
          <Stack.Screen name="register" options={{ headerShown: false, gestureEnabled: false }} />
          <Stack.Screen name="store" options={{ headerShown: false, gestureEnabled: false }} />
          <Stack.Screen name="friends" options={{ headerShown: false }} />
          <Stack.Screen name="add-friends" />
          <Stack.Screen name="profile" options={{ headerShown: false }} />
        </Stack>
        {!hideNavBarRoutes.includes(pathname) && <NavBar />}
      </View>
    </SafeAreaProvider>
  );
}